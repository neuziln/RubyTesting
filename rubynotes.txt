ruby notes


differences between rails generate and rails scaffold

cmd:
1.rails generate scaffold status name:string content:text 
Outcome: created a name field content create status button and hyperlinks
2.rake routes
Outcome: gives all places in the application



edit all pages:
edititing application.html.erb edits all page info this is also where all includes come from. 

Adding Gems:

got to gemfile add (gem 'devise')
type bundle on project cmd.
rails generate devise:install
Some setup you must do manually if you haven't yet:

  1. Ensure you have defined default url options in your environments files. Her
e
     is an example of default_url_options appropriate for a development environm
ent
     in config/environments/development.rb:

       config.action_mailer.default_url_options = { :host => 'localhost:80' }

     In production, :host should be set to the actual host of your application.

  2. Ensure you have defined root_url to *something* in your config/routes.rb.
     For example:

       root :to => "home#index" (statuses#index)
       
       (when you go to root website it will pull up ->app/controllers/statues_controller.rb
       then delete index.html file.

  3. Ensure you have flash messages in app/views/layouts/application.html.erb.
     For example:

       <p class="notice"><%= notice %></p>
       <p class="alert"><%= alert %></p>

  4. If you are deploying on Heroku with Rails 3.2 only, you may want to set:

       config.assets.initialize_on_precompile = false

     On config/application.rb forcing your application to not access the DB
     or load models when precompiling your assets.

  5. You can copy Devise views (for customization) to your app by running:

       rails g devise:views
 on config environments development.rb
 
 rails generate devise user
 
rails generate devise:views

make sure if you add fields to app views devise that they can conenct to databsae
edit the models user.rb

rails console

User.delete_all ..
user = User.first

Status.delete_all delete all database entries for Status

rails generate simple_form:install --bootstrap

using simple_form 

  <div class="field">
    <%= f.label :content %><br />
    <%= f.text_area :content %>
  </div>
  
  replaced by <%= f.input :content %>
  
  <%= simple_form_for(@status, html: {class:"form-horizontal"}) do |f| %> add horizonal class to all of it
  
  status.rb
  
  class Status < ActiveRecord::Base
  attr_accessible :content, :user_id
  belongs_to :user (belongs_to is ***)
end

define common queries in user.rb or status.rb (def full_name first_name + "" + last_name end)
*notes
what columns shoudl you index(any you plan to query)

migration file is changes to database from one version to next

html if you make a sign_out page a get request when browser grabs it would
automatically sign you out. Thats why you make it a post request

you can make test asserts on test/unit fields are generated from the fixtures (yml)

you can also force user validation on models (app/models/user.rb)

if you need custom class placement based on conditions go to app helpers 
open up an rb module and add custom code like 
module ApplicationHelper

	 def flash_class(type)
			case type
				when :alert
					"alert-error"
				when :notice
					"alert-success"
				else 
					""
			end 
	 end
end

then on the app views layouts application.rb look at
<%= flass_class type %>

<% flash.each do |type, message| %>
			<div class="alert <%= flash_class type %>">
				<button class="close" data-dismiss="alert">x</button>
				<%= message %>
			</div>
		<% end %>

writing an rails generate integration will test all of application

writing a test functional statues_controller gives error on name (that's cause it was changed to full_name) also to fix the error update test fixture states.yml to have user: nathan cause already have user.yml fixture with nathan object

controller tests also = functional test

always read documentation ** for example devise needs some helper code
to be pasted at the bottom for tests to run riight

unit test = model test

sqlite3 notes
Access development:
sqlite3 db/development.sqlite3
Access tables in DB:
.tables

rake db:create:all
rake db:migrate
rake db:test:prepare

